const app = require('../app')
const request = require('supertest')

test('Test if user can register', async () => {
  let response = await request(app)
    .post('/register')
    .send({ name: 'bob', email: 'bob@gmail.com', password: 'Bob123456@' })
  expect(response.statusCode).toBe(201)
})

test('Test if email already exists', async () => {
  let response = await request(app)
    .post('/register')
    .send({ name: 'bob', email: 'bob@gmail.com', password: 'Bob123456@' })
  expect(response.statusCode).toBe(400)
})

test('Test if password too weak for register', async () => {
  let response = await request(app)
    .post('/register')
    .send({ name: 'anna', email: 'anna@gmail.com', password: '123456' })
  expect(response.statusCode).toBe(400)
})

test('Test if email empty', async () => {
  let response = await request(app)
    .post('/register')
    .send({ name: 'luke', email: '', password: 'Luke123456@' })
  expect(response.statusCode).toBe(400)
})

test('Test if user can login and list users', async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .get('/api/users')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('Returning users')
  expect(response.body.data.length).toBeGreaterThan(0)
})

test("Test if user's password is incorrect", async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '12312456' })
  expect(response.statusCode).toBe(403)
})

test("Test if user can update user's password", async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/password')
    .set('x-access-token', response.body.token)
    .send({ password: 'New123456@' })
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('Password updated')

  response = await request(app)
    .post('/login')
    .send({ email: 'Sebastien.Viardot@grenoble-inp.fr', password: '123456' })
  expect(response.statusCode).toBe(403)
})

test("Test if admin can update user's information", async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'superuser@gmail.com', password: 'superuser' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/users/3')
    .set('x-access-token', response.body.token)
    .send({ name: 'Lukii', email: 'lukii@gmail.com', password: 'Lukii123@', isAdmin: false })
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('User updated')
})

test("Test if user can't update user's information", async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'thory@gmail.com', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .put('/api/users/3')
    .set('x-access-token', response.body.token)
    .send({ name: 'Lukii', email: 'lukii@gmail.com', password: 'Lukii123@', isAdmin: false })
  expect(response.statusCode).toBe(403)
  expect(response.body.message).toBe('Only admin can modify user details!')
})

test("Test if admin can delete user", async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'superuser@gmail.com', password: 'superuser' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .delete('/api/users/3')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(200)
  expect(response.body.message).toBe('User deleted')
})

test("Test if user can't delete user", async () => {
  let response = await request(app)
    .post('/login')
    .send({ email: 'thory@gmail.com', password: '123456' })
  expect(response.statusCode).toBe(200)
  expect(response.body).toHaveProperty('token')
  response = await request(app)
    .delete('/api/users/3')
    .set('x-access-token', response.body.token)
  expect(response.statusCode).toBe(403)
  expect(response.body.message).toBe('Only admin can delete user!')
})